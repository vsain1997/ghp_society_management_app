<?php

namespace Modules\SuperAdmin\App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\SocietyContact;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use App\Models\Society;
use App\Models\Block;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\DB;

class SocietyController extends Controller
{
    public function store(Request $request)
    {
        try {
            superAdminLog('info', 'start::store');
            DB::beginTransaction();

            $validator = Validator::make($request->all(), [
                'sname' => 'required|string|max:255',
                'location' => 'required|string|max:255',
                'statusSelect' => 'required|string|in:active,inactive',
                'floors' => 'required|integer',
                'floorUnits' => 'required|integer',
                // 'assignAdmin' => 'required|integer',
                'bname' => 'required|array',
                'bname.*' => 'required|string|max:255',
                'totalUnits' => 'required|array',
                'totalUnits.*' => 'required|integer',
                'unit_type' => 'required|array',
                'unit_type.*.*' => 'required|string',
                'unit_size' => 'required|array',
                'unit_size.*.*' => 'required|numeric',
                'unit_qty' => 'required|array',
                'unit_qty.*.*' => 'required|integer',
                'block_id' => 'sometimes|array',
                'block_id.*.*' => 'integer',

                'emr_name' => 'required|array',
                'emr_name.*' => 'required|string',
                'emr_designation' => 'required|array',
                'emr_designation.*' => 'required|string',
                'emr_phone' => 'required|array',
                'emr_phone.*' => 'required|numeric|min:10',
                'emr_id' => 'sometimes|array',
                'emr_id.*' => 'integer',
            ]);

            if ($validator->fails()) {
                superAdminLog('error', 'Validation failed: ' . $validator->errors()->first());
                return redirect()->back()
                    ->withInput()
                    ->with([
                        'status' => 'error',
                        'message' => $validator->errors()->first(),
                    ]);
            }

            $society = Society::create([
                'name' => $request->input('sname'),
                'location' => $request->input('location'),
                'floors' => $request->input('floors'),
                'status' => $request->input('statusSelect'),
                'floor_units' => $request->input('floorUnits'),
                'member_id' => $request->input('assignAdmin'),
            ]);

            superAdminLog('info', 'Society::created');
            $societyId = $society->id;

            $bnameArray = $request->input('bname');
            $totalUnitsArray = $request->input('totalUnits');
            $unitTypeArray = $request->input('unit_type');
            $unitSizeArray = $request->input('unit_size');
            $unitQtyArray = $request->input('unit_qty');

            foreach ($bnameArray as $blockKey => $blockName) {
                foreach ($unitTypeArray[$blockKey] as $unitIndex => $unitType) {
                    Block::create([
                        'name' => $blockName,
                        'total_units' => $totalUnitsArray[$blockKey],
                        'unit_type' => $unitType,
                        'unit_size' => $unitSizeArray[$blockKey][$unitIndex],
                        'unit_qty' => $unitQtyArray[$blockKey][$unitIndex],
                        'society_id' => $societyId,
                    ]);
                }
            }

            superAdminLog('info', 'Block::created');
            // emergency contact
            $emrNameArray = $request->input('emr_name');
            $emrDesignationArray = $request->input('emr_designation');
            $emrPhoneArray = $request->input('emr_phone');

            foreach ($emrNameArray as $emKey => $emrName) {
                SocietyContact::create([
                    'name' => $emrName,
                    'designation' => $emrDesignationArray[$emKey],
                    'phone' => $emrPhoneArray[$emKey],
                    'society_id' => $societyId,
                ]);
            }
            superAdminLog('info', 'SocietyContact::created');
            DB::commit();
            superAdminLog('info', 'end::store');
            return redirect()->back()->with([
                'status' => 'success',
                'message' => 'Added successfully'
            ]);

        } catch (\Exception $e) {
            superAdminLog('error', 'Exception::', $e->getMessage());
            DB::rollBack();
            return redirect()->back()->with([
                'status' => 'error',
                'message' => 'Failed please try again !'
            ]);
        }
    }

    public function show($id)
    {
        try {
            $society = Society::with('blocks', 'society_contacts', 'assigned_admin')->find($id);

            if (!$society) {
                return redirect()->back()->with([
                    'status' => 'success',
                    'message' => 'Not found.'
                ]);
            }
            return view(
                'superadmin::society.details',
                compact('society')
            );
        } catch (\Exception $e) {
            return redirect()->back()->with([
                'status' => 'error',
                'message' => 'Failed please try again !'
            ]);
        }
    }

    public function edit($id)
    {
        try {
            $society = Society::with('blocks', 'society_contacts')->find($id);

            if (!$society) {
                return response()->json([
                    'status' => 'success',
                    'message' => 'Not found'
                ]);
            }
            return response()->json([
                'status' => 'success',
                'data' => $society
            ]);

        } catch (\Exception $e) {
            // 'error' => $e->getMessage(),
            return response()->json([
                'status' => 'error',
                'message' => 'Failed please try again !'
            ]);
        }
    }

    public function update(Request $request, $societyId)
    {
        $validator = Validator::make($request->all(), [
            'sname' => 'required|string|max:255',
            'location' => 'required|string|max:255',
            'statusSelect' => 'required|string|in:active,inactive',
            'floors' => 'required|integer|min:1',
            'floorUnits' => 'required|integer|min:1',
            // 'assignAdmin' => 'required|integer|min:1',
            'bname' => 'required|array',
            'bname.*' => 'required|string|max:255',
            'totalUnits' => 'required|array',
            'totalUnits.*' => 'required|integer|min:1',
            'unit_type' => 'required|array',
            'unit_type.*.*' => 'required|string',
            'unit_size' => 'required|array',
            'unit_size.*.*' => 'required|numeric|min:1',
            'unit_qty' => 'required|array',
            'unit_qty.*.*' => 'required|integer|min:1',
            'block_id' => 'sometimes|array',
            'block_id.*.*' => 'integer',

            'emr_name' => 'required|array',
            'emr_name.*' => 'required|string',
            'emr_designation' => 'required|array',
            'emr_designation.*' => 'required|string',
            'emr_phone' => 'required|array',
            'emr_phone.*' => 'required|numeric|min:10',
            'emr_id' => 'sometimes|array',
            'emr_id.*' => 'integer',
        ]);

        if ($validator->fails()) {
            superAdminLog('error', $validator->errors()->first());
            return response()->json(
                [
                    'status' => 'error',
                    'message' => $validator->errors()->first(),
                ]
            );
        }

        DB::beginTransaction();

        try {
            superAdminLog('info', 'Entered update method');

            $society = Society::find($societyId);
            if (!$society) {
                superAdminLog('error', 'Society not found');
                return response()->json(
                    [
                        'status' => 'success',
                        'message' => 'Not found',
                    ]
                );
            }
            $society->update([
                'name' => $request->input('sname'),
                'location' => $request->input('location'),
                'floors' => $request->input('floors'),
                'status' => $request->input('statusSelect'),
                'floor_units' => $request->input('floorUnits'),
                'member_id' => $request->input('assignAdmin'),
            ]);
            superAdminLog('info', 'society updated');
            // Get the existing blocks for this society
            $existingBlocks = Block::where('society_id', $societyId)->get()->keyBy('id');

            $bnameArray = $request->input('bname');
            $totalUnitsArray = $request->input('totalUnits');
            $unitTypeArray = $request->input('unit_type');
            $unitSizeArray = $request->input('unit_size');
            $unitQtyArray = $request->input('unit_qty');
            $blockIdArray = $request->input('block_id');

            $blockIdsToKeep = [];

            foreach ($bnameArray as $blockKey => $blockName) {
                // Check if block IDs exist for this block
                if (isset($blockIdArray[$blockKey])) {
                    foreach ($blockIdArray[$blockKey] as $blockId) {
                        //Update existing blocks
                        if (isset($existingBlocks[$blockId])) {
                            // Update for each unit type and its corresponding size and quantity
                            foreach ($unitTypeArray[$blockKey] as $unitIndex => $unitType) {
                                // If the block already has unit data, update it
                                Block::updateOrCreate(
                                    ['id' => $blockId],
                                    [
                                        'name' => $blockName,
                                        'total_units' => $totalUnitsArray[$blockKey],
                                        'unit_type' => $unitType,
                                        'unit_size' => $unitSizeArray[$blockKey][$unitIndex],
                                        'unit_qty' => $unitQtyArray[$blockKey][$unitIndex],
                                        'society_id' => $societyId,
                                    ]
                                );
                            }
                        } else {
                            //If block ID doesn't exist, create a new block
                            foreach ($unitTypeArray[$blockKey] as $unitIndex => $unitType) {
                                Block::create([
                                    'name' => $blockName,
                                    'total_units' => $totalUnitsArray[$blockKey],
                                    'unit_type' => $unitType,
                                    'unit_size' => $unitSizeArray[$blockKey][$unitIndex],
                                    'unit_qty' => $unitQtyArray[$blockKey][$unitIndex],
                                    'society_id' => $societyId,
                                ]);
                            }
                        }
                        $blockIdsToKeep[] = $blockId;
                    }
                } else {
                    //Create new block if no IDs provided
                    foreach ($unitTypeArray[$blockKey] as $unitIndex => $unitType) {
                        Block::create([
                            'name' => $blockName,
                            'total_units' => $totalUnitsArray[$blockKey],
                            'unit_type' => $unitType,
                            'unit_size' => $unitSizeArray[$blockKey][$unitIndex],
                            'unit_qty' => $unitQtyArray[$blockKey][$unitIndex],
                            'society_id' => $societyId,
                        ]);
                    }
                }
            }

            // Step 5: Delete blocks that are no longer associated with the society
            $blockIdsToDelete = $existingBlocks->keys()->diff($blockIdsToKeep);
            Block::destroy($blockIdsToDelete);
            superAdminLog('info', 'society updated');

            //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            // emergency conotacts
            //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            $existingSocietyContacts = SocietyContact::where('society_id', $societyId)->get()->keyBy('id');

            $emrNameArray = $request->input('emr_name');
            $emrDesignationArray = $request->input('emr_designation');
            $emrPhoneArray = $request->input('emr_phone');
            $emrIdArray = $request->input('emr_id');

            $emrIdsToKeep = [];

            foreach ($emrNameArray as $emKey => $emrName) {
                // Check if IDs exist for this block
                if (isset($emrIdArray[$emKey])) {
                    foreach ($emrIdArray[$emKey] as $emrId) {
                        //Update existing
                        if (isset($existingSocietyContacts[$emrId])) {
                            // If already, update it
                            SocietyContact::updateOrCreate(
                                ['id' => $emrId],
                                [
                                    'name' => $emrName,
                                    'designation' => $emrDesignationArray[$emKey],
                                    'phone' => $emrPhoneArray[$emKey],
                                    'society_id' => $societyId,
                                ]
                            );
                        } else {
                            //If ID doesn't exist, create a new
                            SocietyContact::create([
                                'name' => $emrName,
                                'designation' => $emrDesignationArray[$emKey],
                                'phone' => $emrPhoneArray[$emKey],
                                'society_id' => $societyId,
                            ]);
                        }
                        $emrIdsToKeep[] = $emrId;
                    }
                } else {
                    //Create new if no IDs provided
                    SocietyContact::create([
                        'name' => $emrName,
                        'designation' => $emrDesignationArray[$emKey],
                        'phone' => $emrPhoneArray[$emKey],
                        'society_id' => $societyId,
                    ]);
                }
            }

            // Step 5: Delete blocks that are no longer associated with the society
            $emrIdsToDelete = $existingSocietyContacts->keys()->diff($emrIdsToKeep);
            SocietyContact::destroy($emrIdsToDelete);
            superAdminLog('info', 'society updated');

            DB::commit();
            superAdminLog('info', 'final::society updated successfully');
            return response()->json(
                [
                    'status' => 'success',
                    'message' => 'Updated successfully',
                ]
            );
        } catch (\Exception $e) {
            superAdminLog('error', 'Exception::', $e->getMessage());
            DB::rollBack();
            return response()->json([
                'status' => 'error',
                'message' => 'Failed please try again !'
            ]);
        }
    }

    public function destroy($id)
    {
        try {
            DB::beginTransaction();

            $society = Society::find($id);
            if (!$society) {
                return response()->json([
                    'status' => 'success',
                    'message' => 'Not found'
                ]);
            }
            // Soft delete
            $society->blocks()->delete();
            $society->society_contacts()->delete();
            $society->delete();
            // $block->forceDelete();
            DB::commit();
            return response()->json([
                'status' => 'success',
                'message' => 'Deleted successfully!'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'status' => 'error',
                'message' => 'Failed, please try again'
            ]);
        }
    }

    public function getBlocks(Request $request)
    {
        // Validate the request
        $request->validate([
            'society_id' => 'required|exists:societies,id',
        ]);

        // Fetch blocks based on society_id
        $blocks = Block::with('society')->where('society_id', $request->society_id)->get();

        // Check if blocks were found
        if ($blocks->isEmpty()) {
            return response()->json([
                'status' => 'error',
                'message' => 'No blocks found on this society.',
            ]);
        }

        // Return the blocks as a JSON response
        return response()->json([
            'status' => 'success',
            'blocks' => $blocks,
        ]);
    }

    public function changeStatus($id, $status)
    {
        try {
            superAdminLog('info', 'start::changeStatus-society');
            $society = Society::find($id);
            if (!$society) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Not found',
                ]);
            }
            $society->status = $status;
            $society->save();

            superAdminLog('info', 'end<success>::changeStatus-society');
            return response()->json([
                'status' => 'success',
                'message' => 'Status updated successfully',
            ]);
        } catch (\Exception $e) {
            superAdminLog('error', 'Exception::', $e->getMessage());
            return response()->json([
                'status' => 'error',
                'message' => 'Failed please try again!'
            ]);
        }
    }


}
